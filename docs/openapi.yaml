openapi: 3.0.2
info:
  version: 1.0.0
  title: Booking Shopify Api
  license:
    name: MIT
    url: 'http://'
  contact:
    name: jamal Soueidan
    email: jamal@soueidan.com
    url: 'https://github.com/jamalsoueidan'
  x-tagGroups:
    - name: all api endpoints
      tags:
        - Schedule
servers:
  - url: 'https://booking-shopify-api.azurewebsites.net/api'
components:
  responses:
    BadResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    ForbiddenResponse:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    NotFoundResponse:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
  schemas:
    Errors:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: array
                items:
                  type: string
              message:
                type: string
              code:
                type: string
              expected:
                type: string
              received:
                type: number
            required:
              - path
              - message
              - code
      required:
        - success
        - errors
    Destroy:
      type: object
      properties:
        deletedCount:
          type: number
        acknowledged:
          type: boolean
      required:
        - deletedCount
        - acknowledged
    Day:
      type: string
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
    Interval:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
      required:
        - from
        - to
    Slot:
      type: object
      properties:
        day:
          $ref: '#/components/schemas/Day'
        intervals:
          type: array
          items:
            $ref: '#/components/schemas/Interval'
      required:
        - day
        - intervals
    Product:
      type: object
      properties:
        productId:
          type: number
        variantId:
          type: number
        description:
          type: string
        duration:
          oneOf:
            - type: string
            - type: number
        breakTime:
          oneOf:
            - type: string
            - type: number
        noticePeriod:
          $ref: '#/components/schemas/ProductNoticePeriod'
        bookingPeriod:
          $ref: '#/components/schemas/ProductBookingPeriod'
      required:
        - variantId
        - productId
        - duration
        - breakTime
        - noticePeriod
        - bookingPeriod
    ProductBookingPeriod:
      type: object
      properties:
        value:
          oneOf:
            - type: string
            - type: number
        unit:
          $ref: '#/components/schemas/ProductBookingUnit'
          default: months
      required:
        - value
        - unit
    ProductBookingUnit:
      type: string
      enum:
        - weeks
        - months
    ProductNoticePeriod:
      type: object
      properties:
        value:
          oneOf:
            - type: string
            - type: number
        unit:
          $ref: '#/components/schemas/ProductNoticeUnit'
          default: hours
      required:
        - value
        - unit
    ProductNoticeUnit:
      type: string
      enum:
        - hours
        - days
        - weeks
    Schedule:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        customerId:
          type: number
        slots:
          type: array
          items:
            $ref: '#/components/schemas/Slot'
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      required:
        - _id
        - name
        - customerId
        - slots
        - products
    ScheduleCreateBody:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    ScheduleCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Schedule'
      required:
        - success
        - payload
    ScheduleDestroyResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Destroy'
      required:
        - success
        - payload
    ScheduleListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
      required:
        - success
        - payload
    ScheduleGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Schedule'
      required:
        - success
        - payload
    ScheduleUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Schedule'
      required:
        - success
        - payload
    ScheduleUpdateBody:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    ScheduleSlotsUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Schedule'
      required:
        - success
        - payload
    ScheduleSlotsUpdateBody:
      type: array
      items:
        $ref: '#/components/schemas/Slot'
    CustomerProductUpsertResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerProductList'
      required:
        - success
        - payload
    CustomerProductUpsertBody:
      type: object
      properties:
        scheduleId:
          type: string
        variantId:
          oneOf:
            - type: string
            - type: number
        duration:
          oneOf:
            - type: string
            - type: number
        breakTime:
          oneOf:
            - type: string
            - type: number
        noticePeriod:
          $ref: '#/components/schemas/ProductNoticePeriod'
        bookingPeriod:
          $ref: '#/components/schemas/ProductBookingPeriod'
      required:
        - scheduleId
        - variantId
        - duration
        - breakTime
        - noticePeriod
        - bookingPeriod
    CustomerProductDestroyResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          properties:
            matchedCount:
              type: number
            modifiedCount:
              type: number
            upsertedCount:
              type: number
          required:
            - matchedCount
            - modifiedCount
            - upsertedCount
      required:
        - success
        - payload
    CustomerProductGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerProductList'
      required:
        - success
        - payload
    CustomerBooking:
      type: object
      properties:
        orderId:
          type: integer
        buyer:
          type: object
          properties:
            id:
              type: integer
            fullName:
              type: string
            phone:
              type: string
            email:
              type: string
          required:
            - id
            - fullName
            - phone
            - email
        lineItems:
          type: array
          items:
            type: object
            properties:
              customerId:
                type: integer
              from:
                type: string
                format: date-time
              to:
                type: string
                format: date-time
              productId:
                type: integer
              variantId:
                type: integer
              lineItemId:
                type: integer
              title:
                type: string
              priceSet:
                type: object
                properties:
                  amount:
                    type: string
                  currency_code:
                    type: string
                required:
                  - amount
                  - currency_code
              totalDiscountSet:
                type: object
                properties:
                  amount:
                    type: string
                  currency_code:
                    type: string
                required:
                  - amount
                  - currency_code
              status:
                type: string
                enum:
                  - fulfilled
                  - unfulfilled
                  - cancelled
                  - refunded
            required:
              - customerId
              - from
              - to
              - productId
              - variantId
              - lineItemId
              - title
              - priceSet
              - totalDiscountSet
              - status
        cancelReason:
          type: string
        cancelledAt:
          type: string
          format: date-time
      required:
        - orderId
        - buyer
        - lineItems
        - cancelReason
        - cancelledAt
    CustomerBookingGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerBooking'
      required:
        - success
        - payload
    CustomerBookingListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerBooking'
      required:
        - success
        - payload
    Customer:
      type: object
      properties:
        customerId:
          type: number
        title:
          type: string
        username:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
        fullname:
          type: string
        aboutMe:
          type: string
        shortDescription:
          type: string
        socialUrls:
          type: object
          properties:
            youtube:
              type: string
            twitter:
              type: string
            instagram:
              type: string
        avatar:
          type: string
          format: uri
        speaks:
          type: array
          items:
            type: string
      required:
        - customerId
        - title
        - fullname
        - avatar
        - speaks
        - socialUrls
        - shortDescription
        - aboutMe
    CustomerExists:
      type: object
      properties:
        exists:
          type: boolean
    CustomerProductList:
      type: object
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            scheduleId:
              type: string
            scheduleName:
              type: string
          required:
            - scheduleId
            - scheduleName
    CustomerProductAvailability:
      type: object
      properties:
        date:
          type: string
          example: '2023-05-05T00:00:00.000Z'
        customer:
          type: object
          properties:
            customerId:
              type: string
            fullname:
              type: string
          required:
            - customerId
            - fullname
        slots:
          type: array
          items:
            type: object
            properties:
              from:
                type: string
                example: '2023-05-05T00:00:00.000Z'
              to:
                type: string
                example: '2023-05-05T00:00:00.000Z'
              products:
                type: array
                items:
                  type: object
                  properties:
                    productId:
                      type: number
                    variantId:
                      type: number
                    from:
                      type: string
                      example: '2023-05-05T00:00:00.000Z'
                    to:
                      type: string
                      example: '2023-05-05T00:00:00.000Z'
                    breakTime:
                      type: number
                    duration:
                      type: number
                  required:
                    - productId
                    - variantId
                    - from
                    - to
                    - breakTime
                    - duration
            required:
              - from
              - to
              - products
      required:
        - date
        - customer
        - slots
    CustomerIsBusinessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/CustomerExists'
      required:
        - success
        - payload
    CustomersListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/Customer'
      required:
        - success
        - payload
    CustomerGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Customer'
      required:
        - success
        - payload
    CustomerUpsertResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Customer'
      required:
        - success
        - payload
    CustomerUpsertBody:
      type: object
      properties:
        title:
          type: string
        username:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
        fullname:
          type: string
        aboutMe:
          type: string
        shortDescription:
          type: string
        socialUrls:
          type: object
          properties:
            youtube:
              type: string
            twitter:
              type: string
            instagram:
              type: string
        avatar:
          type: string
          format: uri
        speaks:
          type: array
          items:
            type: string
      required:
        - title
        - username
        - fullname
    CustomerProductListIdsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            type: number
      required:
        - success
        - payload
    CustomerProductListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerProductList'
      required:
        - success
        - payload
    CustomerProductAvailabilityResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerProductAvailability'
      required:
        - success
        - payload
paths:
  /customers:
    get:
      tags:
        - Customer
      operationId: customersList
      summary: GET Get all customers
      description: This endpoint get all customers
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{identifier}':
    put:
      parameters:
        - name: identifier
          in: path
          description: must be customerId
          required: true
          schema:
            type: string
      tags:
        - Customer
      operationId: customerUpsert
      summary: PUT Create or Update user
      description: This endpoint creates new or updates user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerUpsertBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerUpsertResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
    get:
      parameters:
        - name: identifier
          in: path
          description: must be username
          required: true
          schema:
            type: string
      tags:
        - Customer
      operationId: customerGet
      summary: GET Get customer
      description: This endpoint gets customer object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/isBusiness':
    get:
      parameters:
        - name: customerId
          in: path
          description: CustomerId from shopify
          required: true
          schema:
            type: string
      tags:
        - Customer
      operationId: customerIsBusiness
      summary: GET Get customer is business
      description: This endpoint return if customer is business or not
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerIsBusinessResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/products':
    parameters:
      - name: customerId
        in: path
        description: customerId is needed
        required: true
        schema:
          type: string
    get:
      tags:
        - Customer
      operationId: customerProductsList
      summary: GET Get products for customer
      description: This endpoint get products for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/products/ids':
    parameters:
      - name: customerId
        in: path
        description: customerId is needed
        required: true
        schema:
          type: string
    get:
      tags:
        - Customer
      operationId: customerProductsListIds
      summary: GET Get product ids for customer
      description: This endpoint get product ids for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductListIdsResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/product/availability':
    parameters:
      - name: customerId
        in: path
        description: This field for customerId
        required: true
        schema:
          type: string
      - name: productIds
        in: query
        description: This field for productId
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: This field filter by start date
        required: true
        schema:
          type: string
    get:
      tags:
        - Customer
      operationId: customerProductAvailability
      summary: GET Get all availabilty for customer product
      description: This endpoint get all availability for product for customerId
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductAvailabilityResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/product/{productId}':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
      - name: productId
        in: path
        description: The ID of the productId
        required: true
        schema:
          type: string
    get:
      tags:
        - Product
      operationId: customerProductGet
      summary: GET Get product that exist in one of the schedules for customer
      description: This endpoint get product for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    put:
      tags:
        - Product
      operationId: customerProductUpsert
      summary: PUT Upsert product to schedule
      description: This endpoint update product that exist in schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerProductUpsertBody'
      responses:
        '200':
          description: Response with schedule product payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductUpsertResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    delete:
      tags:
        - Product
      operationId: customerProductDestroy
      summary: DEL destroy product
      description: This endpoint remove product from schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductDestroyResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/booking/{orderId}':
    get:
      parameters:
        - name: customerId
          in: path
          description: customerId for the customer
          required: true
          schema:
            type: string
        - name: orderId
          in: path
          description: orderId for the order
          required: true
          schema:
            type: string
        - name: date
          in: query
          description: date for the lineItem (2014-12-12)
          required: true
          schema:
            type: string
      tags:
        - Booking
      operationId: customerBookingGet
      summary: GET Get booking
      description: This endpoint gets booking object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerBookingGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/bookings':
    get:
      parameters:
        - name: customerId
          in: path
          description: customerId for the customer
          required: true
          schema:
            type: string
        - name: mode
          in: query
          description: 'either "upcoming", "completed"'
          required: true
          schema:
            type: string
            enum:
              - completed
              - upcoming
      tags:
        - Booking
      operationId: customerBookingsList
      summary: GET Get all bookings for customer
      description: This endpoint get all bookings
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerBookingListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/schedule':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
    post:
      tags:
        - Schedule
      operationId: customerScheduleCreate
      summary: POST Create schedule
      description: This endpoint create new schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleCreateBody'
      responses:
        '200':
          description: Response with schedule payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleCreateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/schedules':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
    get:
      tags:
        - Schedule
      operationId: customerScheduleList
      summary: GET Get all schedule for customer
      description: This endpoint get all schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/schedule/{scheduleId}':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
      - name: scheduleId
        in: path
        description: The ID of the scheduleId
        required: true
        schema:
          type: string
    get:
      tags:
        - Schedule
      operationId: customerScheduleGet
      summary: GET Get schedule for customer
      description: This endpoint get schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
    put:
      tags:
        - Schedule
      operationId: customerScheduleUpdate
      summary: PUT Update schedule
      description: This endpoint update schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleUpdateBody'
      responses:
        '200':
          description: Response with schedule payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    delete:
      tags:
        - Schedule
      operationId: customerScheduleDestroy
      summary: DEL destroy schedule
      description: This endpoint destroy schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleDestroyResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/schedule/{scheduleId}/slots':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
      - name: scheduleId
        in: path
        description: The ID of the scheduleId
        required: true
        schema:
          type: string
    put:
      tags:
        - Slot
      operationId: customerScheduleSlotUpdate
      summary: PUT Update schedule slot
      description: This endpoint update schedule slot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleSlotsUpdateBody'
      responses:
        '200':
          description: Response with schedule payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleSlotsUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
