openapi: 3.0.2
info:
  version: 1.0.0
  title: Booking Shopify Api
  license:
    name: MIT
    url: 'http://'
  contact:
    name: jamal Soueidan
    email: jamal@soueidan.com
    url: 'https://github.com/jamalsoueidan'
  x-tagGroups:
    - name: all api endpoints
      tags:
        - Auth
        - Availability
        - Booking
        - Installation
        - My Account
        - Product
        - Setting
        - Shift
        - Shopify
        - User
servers:
  - url: 'https://booking-shopify-api.azurewebsites.net/api'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ZodError'
    ForbiddenResponse:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundResponse:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: error message
    ZodError:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: array
          items:
            type: object
            properties:
              path:
                type: array
                items:
                  type: string
              message:
                type: string
              code:
                type: string
              expected:
                type: string
              received:
                type: number
            required:
              - path
              - message
              - code
    AuthLoginRequest:
      type: object
      properties:
        identification:
          type: string
          example: 31317428
        password:
          type: string
          example: code
      required:
        - identification
        - password
    AuthLoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        token:
          type: string
          example: Token to be saved in browser
      required:
        - success
        - token
    AuthPasswordRequest:
      type: object
      properties:
        phone:
          type: string
          example: 31317428
          description: The phone number associated with the password
      required:
        - phone
    AuthPasswordResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Password received successfully
    InstallationGetStatusResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          properties:
            done:
              type: boolean
              example: true
              description: 'if true, it''s already installed!'
    InstallationSetupBody:
      type: object
      properties:
        address:
          type: string
        avatar:
          type: string
        email:
          type: string
          uniqueItems: true
        fullname:
          type: string
        group:
          type: string
          default: all
        language:
          type: string
          default: da
        phone:
          type: string
          uniqueItems: true
        position:
          type: string
        postal:
          type: integer
        timeZone:
          type: string
          default: Europe/Copenhagen
      required:
        - fullname
        - email
        - phone
        - postal
        - position
        - avatar
    InstallationSetupResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: boolean
          example: true
          description: If true everything went good.
    Setting:
      type: object
      properties:
        _id:
          type: string
        language:
          type: string
          enum:
            - en-US
            - da-DK
        timeZone:
          type: string
        status:
          type: boolean
      required:
        - _id
        - shop
        - language
        - timeZone
        - status
    SettingBody:
      type: object
      properties:
        language:
          type: string
          enum:
            - en-US
            - da-DK
        timeZone:
          type: string
        status:
          type: boolean
      required:
        - language
        - timeZone
        - status
    SettingResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Setting'
    User:
      type: object
      properties:
        _id:
          type: string
        active:
          type: boolean
          default: true
        address:
          type: string
        avatar:
          type: string
        email:
          type: string
          uniqueItems: true
        fullname:
          type: string
        group:
          type: string
          default: all
        language:
          type: string
          default: da
        phone:
          type: string
          uniqueItems: true
        position:
          type: string
        postal:
          type: integer
        timeZone:
          type: string
          default: Europe/Copenhagen
      required:
        - _id
        - fullname
        - email
        - phone
        - postal
        - position
        - avatar
    UserCreateBody:
      type: object
      properties:
        active:
          type: boolean
          default: true
        address:
          type: string
        avatar:
          type: string
        email:
          type: string
          uniqueItems: true
        fullname:
          type: string
        group:
          type: string
          default: all
        language:
          type: string
          default: da
        phone:
          type: string
          uniqueItems: true
        position:
          type: string
        postal:
          type: integer
        timeZone:
          type: string
          default: Europe/Copenhagen
      required:
        - fullname
        - email
        - phone
        - postal
        - position
        - avatar
    UserCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
    UserGetAllResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/User'
    UserGetByIdResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
    UserUpdateBody:
      type: object
      properties:
        active:
          type: boolean
          default: true
        address:
          type: string
        avatar:
          type: string
        email:
          type: string
          uniqueItems: true
        fullname:
          type: string
        group:
          type: string
          default: all
        language:
          type: string
          default: da
        phone:
          type: string
          uniqueItems: true
        position:
          type: string
        postal:
          type: integer
        timeZone:
          type: string
          default: Europe/Copenhagen
      required:
        - fullname
        - email
        - phone
        - postal
        - position
        - avatar
    UserUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
    Shift:
      type: object
      properties:
        _id:
          type: string
        end:
          type: string
          format: date-time
        userId:
          type: string
        start:
          type: string
          format: date-time
        tag:
          $ref: '#/components/schemas/ShiftTag'
      required:
        - _id
        - end
        - userId
        - start
        - tag
    ShiftGroup:
      type: object
      properties:
        _id:
          type: string
        end:
          type: string
          format: date-time
        groupId:
          type: string
        userId:
          type: string
        start:
          type: string
          format: date-time
        tag:
          $ref: '#/components/schemas/ShiftTag'
        day:
          $ref: '#/components/schemas/ShiftDay'
      required:
        - _id
        - end
        - groupId
        - userId
        - start
        - tag
        - day
    ShiftDay:
      type: array
      items:
        type: string
        enum:
          - monday
          - tuesday
          - wednesday
          - thursday
          - friday
          - saturday
      minItems: 1
      uniqueItems: true
    ShiftTag:
      type: string
      enum:
        - weekday
        - weekend
        - all_day
        - end_of_week
        - start_of_week
        - middle_of_week
    ShiftCreateBody:
      type: object
      properties:
        end:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
        tag:
          $ref: '#/components/schemas/ShiftTag'
      required:
        - end
        - userId
        - start
        - tag
    ShiftCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Shift'
    ShiftCreateGroupBody:
      type: object
      properties:
        end:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
        day:
          $ref: '#/components/schemas/ShiftDay'
        tag:
          $ref: '#/components/schemas/ShiftTag'
      required:
        - end
        - userId
        - start
        - day
        - tag
    ShiftCreateGroupResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/ShiftGroup'
    ShiftDestroy:
      type: object
      properties:
        acknowledged:
          type: boolean
        deletedCount:
          type: number
      required:
        - acknowledged
        - deletedCount
    ShiftDestroyResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/ShiftDestroy'
    ShiftDestroyGroup:
      type: object
      properties:
        acknowledged:
          type: boolean
        deletedCount:
          type: number
      required:
        - acknowledged
        - deletedCount
    ShiftDestroyGroupResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/ShiftDestroyGroup'
    ShiftGetAllResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/Shift'
    ShiftGetGroupResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/ShiftGroup'
    ShiftUpdateBody:
      type: object
      properties:
        end:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
        tag:
          $ref: '#/components/schemas/ShiftTag'
      required:
        - end
        - userId
        - start
        - tag
    ShiftUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Shift'
    ShiftUpdateGroupBody:
      type: object
      properties:
        end:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
        day:
          $ref: '#/components/schemas/ShiftDay'
        tag:
          $ref: '#/components/schemas/ShiftTag'
      required:
        - end
        - userId
        - start
        - day
        - tag
    ShiftUpdateGroupResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/ShiftGroup'
    ProductGetAll:
      type: object
      properties:
        _id:
          type: string
        hidden:
          type: boolean
        imageUrl:
          type: string
        productId:
          type: integer
        users:
          type: array
          items:
            $ref: '#/components/schemas/ProductGetAllUser'
        title:
          type: string
        active:
          type: boolean
          default: true
        buffertime:
          type: integer
        duration:
          type: integer
      required:
        - _id
        - collectionId
        - hidden
        - imageUrl
        - productId
        - users
        - title
        - active
        - buffertime
        - duration
    ProductGetAllUser:
      type: object
      properties:
        userId:
          type: string
        tag:
          type: string
        fullname:
          type: string
        email:
          type: string
        phone:
          type: string
        avatar:
          type: string
        position:
          type: string
        postal:
          type: integer
      required:
        - userId
        - tag
        - fullname
        - email
        - phone
        - avatar
        - position
        - postal
    ProductGetAllResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/ProductGetAll'
    ProductGetAvailableUsers:
      type: object
      properties:
        _id:
          type: string
        tag:
          type: string
        fullname:
          type: string
        email:
          type: string
        phone:
          type: string
        avatar:
          type: string
        position:
          type: string
        postal:
          type: integer
        tags:
          type: array
          items:
            type: string
            enum:
              - weekday
              - weekend
              - all_day
              - end_of_week
              - start_of_week
              - middle_of_week
          minItems: 1
      required:
        - _id
        - tag
        - fullname
        - email
        - phone
        - avatar
        - position
        - postal
        - tags
    ProductGetAvailableUsersResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/ProductGetAvailableUsers'
    ProductGetById:
      type: object
      properties:
        _id:
          type: string
        hidden:
          type: boolean
        imageUrl:
          type: string
        productId:
          type: integer
        users:
          type: array
          items:
            $ref: '#/components/schemas/ProductGetByIdUser'
        title:
          type: string
        active:
          type: boolean
          default: true
        buffertime:
          type: integer
        duration:
          type: integer
      required:
        - _id
        - collectionId
        - hidden
        - imageUrl
        - productId
        - users
        - title
        - active
        - buffertime
        - duration
    ProductGetByIdUser:
      type: object
      properties:
        userId:
          type: string
        tag:
          type: string
        fullname:
          type: string
        email:
          type: string
        phone:
          type: string
        avatar:
          type: string
        position:
          type: string
        postal:
          type: integer
      required:
        - userId
        - tag
        - fullname
        - email
        - phone
        - avatar
        - position
        - postal
    ProductGetByIdResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/ProductGetById'
    ProductUpdateBody:
      type: object
      properties:
        hidden:
          type: boolean
        users:
          type: array
          items:
            $ref: '#/components/schemas/ProductUpdateBodyUser'
        active:
          type: boolean
          default: true
        buffertime:
          type: integer
        duration:
          type: integer
      required:
        - hidden
        - users
        - active
        - buffertime
        - duration
    ProductUpdateBodyUser:
      type: object
      properties:
        userId:
          type: string
        tag:
          type: string
      required:
        - userId
        - tag
    ProductUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: object
          properties:
            _id:
              type: string
            collectionId:
              type: integer
            hidden:
              type: boolean
            imageUrl:
              type: string
            productId:
              type: integer
            users:
              type: array
              items:
                $ref: '#/components/schemas/ProductUpdateUser'
            title:
              type: string
            active:
              type: boolean
              default: true
            buffertime:
              type: integer
            duration:
              type: integer
          required:
            - _id
            - collectionId
            - hidden
            - imageUrl
            - productId
            - users
            - title
            - active
            - buffertime
            - duration
    ProductUpdateUser:
      type: object
      properties:
        userId:
          type: string
        tag:
          type: string
        fullname:
          type: string
        email:
          type: string
        phone:
          type: string
        avatar:
          type: string
        position:
          type: string
        postal:
          type: integer
      required:
        - userId
        - tag
        - fullname
        - email
        - phone
        - avatar
        - position
        - postal
    Booking:
      type: object
      properties:
        _id:
          type: string
          description: A valid ObjectId
        productId:
          type: integer
        orderId:
          type: integer
        lineItemId:
          type: integer
        lineItemTotal:
          type: integer
        customerId:
          type: integer
        userId:
          type: string
          description: A valid ObjectId
        end:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
        anyAvailable:
          type: boolean
        fulfillmentStatus:
          type: string
          enum:
            - cancelled
            - refunded
            - fulfilled
            - booked
            - default
        title:
          type: string
        timeZone:
          type: string
        isEdit:
          type: boolean
        isSelfBooked:
          type: boolean
      required:
        - _id
        - productId
        - orderId
        - lineItemId
        - lineItemTotal
        - customerId
        - userId
        - end
        - start
        - fulfillmentStatus
        - title
        - timeZone
    BookingCreateBody:
      type: object
      properties:
        productId:
          type: integer
        customerId:
          type: integer
        userId:
          type: string
          description: A valid ObjectId
        end:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
        title:
          type: string
      required:
        - _id
        - productId
        - customerId
        - userId
        - end
        - start
        - title
    BookingCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Booking'
    BookingGetAll:
      type: object
      properties:
        _id:
          type: string
          description: A valid ObjectId
        productId:
          type: integer
        orderId:
          type: integer
        lineItemId:
          type: integer
        lineItemTotal:
          type: integer
        customerId:
          type: integer
        userId:
          type: string
          description: A valid ObjectId
        end:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
        anyAvailable:
          type: boolean
        fulfillmentStatus:
          type: string
          enum:
            - cancelled
            - refunded
            - fulfilled
            - booked
            - default
        title:
          type: string
        timeZone:
          type: string
        isEdit:
          type: boolean
        isSelfBooked:
          type: boolean
        customer:
          $ref: '#/components/schemas/BookingGetAllCustomer'
        product:
          $ref: '#/components/schemas/BookingGetAllProduct'
        user:
          $ref: '#/components/schemas/User'
      required:
        - _id
        - productId
        - orderId
        - lineItemId
        - lineItemTotal
        - customerId
        - userId
        - end
        - start
        - fulfillmentStatus
        - title
        - timeZone
        - customer
        - product
        - user
    BookingGetAllCustomer:
      type: object
      properties:
        _id:
          type: string
        customerId:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        fullname:
          type: string
        email:
          type: string
        phone:
          type: string
      required:
        - _id
        - customerId
        - firstName
        - lastName
        - fullname
        - email
        - phone
    BookingGetAllProduct:
      type: object
      properties:
        _id:
          type: string
        hidden:
          type: boolean
        imageUrl:
          type: string
        productId:
          type: integer
        userId:
          type: string
        title:
          type: string
        active:
          type: boolean
          default: true
        buffertime:
          type: integer
        duration:
          type: integer
      required:
        - _id
        - collectionId
        - hidden
        - imageUrl
        - productId
        - userId
        - title
        - active
        - buffertime
        - duration
    BookingGetAllResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/BookingGetAll'
    BookingGetByIdResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Booking'
    BookingUpdateBody:
      type: object
      properties:
        productId:
          type: integer
        customerId:
          type: integer
        userId:
          type: string
          description: A valid ObjectId
        end:
          type: string
          format: date-time
        start:
          type: string
          format: date-time
        title:
          type: string
      required:
        - _id
        - productId
        - customerId
        - userId
        - end
        - start
        - title
    BookingUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Booking'
    CollectionGetAll:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        collectionId:
          type: number
          uniqueItems: true
        hidden:
          type: boolean
          default: false
        items:
          type: number
        products:
          type: array
          items:
            $ref: '#/components/schemas/CollectionGetAllProduct'
      required:
        - fullname
        - email
        - phone
        - postal
        - position
        - avatar
    CollectionGetAllProduct:
      type: object
      properties:
        _id:
          type: string
        hidden:
          type: boolean
        imageUrl:
          type: string
        productId:
          type: integer
        users:
          type: array
          items:
            $ref: '#/components/schemas/CollectionGetAllUser'
        title:
          type: string
        active:
          type: boolean
          default: true
        buffertime:
          type: integer
        duration:
          type: integer
      required:
        - _id
        - collectionId
        - hidden
        - imageUrl
        - productId
        - users
        - title
        - active
        - buffertime
        - duration
    CollectionGetAllResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CollectionGetAll'
    CollectionGetAllUser:
      type: object
      properties:
        userId:
          type: string
        tag:
          type: string
        fullname:
          type: string
        email:
          type: string
        phone:
          type: string
        avatar:
          type: string
        position:
          type: string
        postal:
          type: integer
      required:
        - userId
        - tag
        - fullname
        - email
        - phone
        - avatar
        - position
        - postal
    ShopifyLoadData:
      type: object
      properties:
        id:
          type: string
        purgeHistoryDeleteUri:
          type: string
          description: The URI used to delete the object's history.
        restartPostUri:
          type: string
          description: The URI used to restart the object.
        resumePostUri:
          type: string
          description: The URI used to resume the object.
        rewindPostUri:
          type: string
          description: The URI used to rewind the object.
        sendEventPostUri:
          type: string
          description: The URI used to send an event to the object.
        statusQueryGetUri:
          type: string
          description: The URI used to query the object's status (use this!)
        suspendPostUri:
          type: string
          description: The URI used to suspend the object.
        terminatePostUri:
          type: string
          description: The URI used to terminate the object.
      required:
        - id
        - purgeHistoryDeleteUri
        - restartPostUri
        - resumePostUri
        - rewindPostUri
        - sendEventPostUri
        - statusQueryGetUri
        - suspendPostUri
        - terminatePostUri
    ShopifyLoadDataResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/ShopifyLoadData'
    ShopifySearchCustomers:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
      required:
        - id
        - firstName
        - lastName
        - email
        - phone
    ShopifySearchCustomersResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/ShopifySearchCustomers'
    AvailabilityHour:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
    AvailabilityShift:
      type: object
      properties:
        date:
          type: string
          format: date
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        bufferTime:
          type: integer
        duration:
          type: integer
        total:
          type: integer
        hours:
          type: array
          items:
            $ref: '#/components/schemas/AvailabilityHour'
    AvailabilityGetAvailabilityResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/AvailabilityShift'
    AvailabilityGetUsersResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/User'
    AvailabilityGetSettingsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Setting'
paths:
  /auth/login:
    post:
      tags:
        - Auth
      operationId: authLogin
      summary: Logs in a user
      description: This endpoint return to you token for authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginRequest'
      responses:
        '200':
          description: Login success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthLoginResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
      security: []
  /auth/receive-password:
    post:
      tags:
        - Auth
      operationId: authReceivePassword
      summary: Receive password
      description: This endpoint receives a password using a phone number provided in the request body.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthPasswordRequest'
      responses:
        '200':
          description: Password received successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthPasswordResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
      security: []
  '/availability/{productId}/get-availability':
    parameters:
      - name: productId
        in: path
        description: This field for productId from shopify
        required: true
        schema:
          type: string
      - name: start
        in: query
        description: This field filter by start date
        required: true
        schema:
          type: string
          format: date-time
      - name: end
        in: query
        description: This field filter by end date
        required: true
        schema:
          type: string
          format: date-time
      - name: userId
        in: query
        description: This field filter by userId.
        required: false
        schema:
          type: string
          description: A valid ObjectId
    get:
      tags:
        - Availability
      operationId: availabilityGetAvailability
      summary: GET Get all availabilty
      description: This endpoint get all availability for product (and for userId)
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityGetAvailabilityResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/availability/{productId}/get-settings':
    parameters:
      - name: productId
        in: path
        description: This field for productId from shopify
        required: true
        schema:
          type: string
    get:
      tags:
        - Availability
      operationId: availabilityGetSettings
      summary: GET Get settings
      description: This endpoint get all settings for product
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityGetSettingsResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/availability/{productId}/get-users':
    parameters:
      - name: productId
        in: path
        description: This field for productId from shopify
        required: true
        schema:
          type: string
    get:
      tags:
        - Availability
      operationId: availabilityGetUsers
      summary: GET Get all users
      description: This endpoint get all users for product
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailabilityGetUsersResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /booking:
    post:
      tags:
        - Booking
      operationId: bookingCreate
      summary: POST Create booking
      description: This endpoint create new booking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingCreateBody'
      responses:
        '200':
          description: Response with booking model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingCreateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth: []
  '/booking/{id}':
    parameters:
      - name: id
        in: path
        description: The ID of the booking
        required: true
        schema:
          type: string
    get:
      parameters:
        - name: userId
          in: query
          description: This field filter by userId(s). (Only 'owner' role can set this parameter)
          required: false
          schema:
            oneOf:
              - type: string
                description: A valid ObjectId
              - type: array
                items:
                  type: string
                  description: A valid ObjectId
      tags:
        - Booking
      operationId: bookingGetById
      summary: GET Get user
      description: This endpoint gets user object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingGetByIdResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth: []
    put:
      tags:
        - Booking
      operationId: bookingUpdateById
      summary: PUT Update user
      description: This endpoint update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingUpdateBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
        - BearerAuth:
            - owner
            - admin
  /bookings:
    parameters:
      - name: start
        in: query
        description: This field filter by start date
        required: true
        schema:
          type: string
          format: date-time
      - name: end
        in: query
        description: This field filter by end date
        required: true
        schema:
          type: string
          format: date-time
      - name: userId
        in: query
        description: This field filter by userId(s). (Only 'owner' role can set this parameter)
        required: false
        schema:
          oneOf:
            - type: string
              description: A valid ObjectId
            - type: array
              items:
                type: string
                description: A valid ObjectId
    get:
      tags:
        - Booking
      operationId: bookingGetAll
      summary: GET Get all bookings
      description: This endpoint get all bookings
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingGetAllResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth: []
  /installation/get-status:
    get:
      tags:
        - Installation
      operationId: installationGetSTatus
      summary: GET get status of the installation
      description: This endpoint gets the status of the installation
      responses:
        '200':
          description: Response payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallationGetStatusResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  /installation/setup:
    post:
      tags:
        - Installation
      operationId: installationSetup
      summary: POST create user
      description: This endpoint setup the platform by creating first user as owner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstallationSetupBody'
      responses:
        '200':
          description: Response payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallationSetupResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  /collections:
    parameters:
      - name: group
        in: query
        description: 'The field filter by user group, only show collections that have products that contains this specific user group'
        required: false
        schema:
          type: string
    get:
      tags:
        - Collection
      operationId: collectionGetAll
      summary: GET All collections
      description: This endpoint gets all collection
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionGetAllResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
        - BearerAuth: []
  /my-account:
    get:
      tags:
        - My Account
      operationId: myAccountGet
      summary: Get my-account data
      description: This endpoint get account data.
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetByIdResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
        - BearerAuth: []
    put:
      tags:
        - My Account
      operationId: myAccountUpdate
      summary: Update my-account data
      description: This endpoint update account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth: []
  /products:
    parameters:
      - name: group
        in: query
        description: 'The field filter by user group, only show products that contain users with specific group'
        required: false
        schema:
          type: string
      - name: userId
        in: query
        description: 'This field to filter by user id, only show products where this user is assigned to.'
        required: false
        schema:
          type: string
    get:
      tags:
        - Product
      operationId: productGetAll
      summary: GET Get all products
      description: This endpoint get all products
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGetAllResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth: []
  /products/get-available-users:
    parameters:
      - name: group
        in: query
        description: Filter products by a specific user group. Only 'owner' role can use this parameter.
        required: false
        schema:
          type: string
    get:
      tags:
        - Product
      operationId: productGetAvailableUsers
      summary: GET Get all available users
      description: This endpoint get all available users
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGetAvailableUsersResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth:
            - owner
            - admin
  '/products/{id}':
    parameters:
      - name: id
        in: path
        description: The ID of the product
        required: true
        schema:
          type: string
    put:
      tags:
        - Product
      operationId: productUpdateById
      summary: PUT Update product
      description: This endpoint update product
      requestBody:
        description: Body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdateBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth:
            - owner
            - admin
    get:
      parameters:
        - name: group
          in: query
          description: Filter products by a specific user group. (Only 'owner' role can use this parameter)
          required: false
          schema:
            type: string
      tags:
        - Product
      operationId: productGetById
      summary: GET Get product
      description: This endpoint gets product object
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductGetByIdResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth: []
  /setting:
    get:
      tags:
        - Setting
      operationId: settingGet
      summary: Get settings
      description: This endpoint get settings.
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
        - BearerAuth: []
    put:
      tags:
        - Setting
      operationId: settingUpdate
      summary: Update settings
      description: This endpoint update setting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth:
            - owner
  /shopify/load-data:
    get:
      tags:
        - Shopify
      operationId: shopifyLoadData
      summary: GET Load Shopify Data
      description: This endpoint load all shopify collections and products
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopifyLoadDataResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
        - BearerAuth: []
  /shopify/search-customers:
    get:
      tags:
        - Shopify
      operationId: shopifySearchCustomers
      summary: GET Search Shopify Customers
      description: This endpoint can search in shopify customers
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopifySearchCustomersResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
        - BearerAuth: []
  '/user/{userId}/shift':
    parameters:
      - name: userId
        in: path
        description: The ID of the user
        required: true
        schema:
          type: string
    post:
      tags:
        - Shift
      operationId: shiftCreate
      summary: POST Create shift
      description: This endpoint create new shift
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShiftCreateBody'
      responses:
        '200':
          description: Response with Array of ShiftModel payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftCreateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth: []
  '/user/{userId}/shift-group':
    parameters:
      - name: userId
        in: path
        description: The ID of the user
        required: true
        schema:
          type: string
    post:
      tags:
        - Shift
      operationId: shiftCreateGroup
      summary: POST Create shift group
      description: This endpoint create new shift group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShiftCreateGroupBody'
      responses:
        '200':
          description: Response with ..
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftCreateGroupResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth: []
  '/user/{userId}/shift-group/{groupId}':
    parameters:
      - name: userId
        in: path
        description: The ID of the user
        required: true
        schema:
          type: string
      - name: groupId
        in: path
        description: The ID of the group
        required: true
        schema:
          type: string
    get:
      tags:
        - Shift
      operationId: shiftGetGroup
      summary: GET Get shift group
      description: This endpoint get shift group by id
      responses:
        '200':
          description: get shift group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftGetGroupResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth: []
    put:
      tags:
        - Shift
      operationId: shiftUpdateGroup
      summary: PUT Update shift group
      description: This endpoint update shift group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShiftUpdateGroupBody'
      responses:
        '200':
          description: Response with updated model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftUpdateGroupResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth: []
    delete:
      tags:
        - Shift
      operationId: shiftDestroyGroup
      summary: DEL Delete shift group
      description: This endpoint delete shift group
      responses:
        '200':
          description: Response ShiftDestroyGroup model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftDestroyGroupResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth: []
  '/user/{userId}/shifts':
    parameters:
      - name: userId
        in: path
        description: The ID of the user
        required: true
        schema:
          type: string
    get:
      tags:
        - Shift
      operationId: shiftGetAll
      summary: GET Get all shifts
      description: This endpoint get all shifts
      responses:
        '200':
          description: Response ShiftDestroyGroup model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftGetAllResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
        - BearerAuth: []
  '/user/{userId}/shift/{id}':
    parameters:
      - name: id
        in: path
        description: The ID of the user
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The ID of the user
        required: true
        schema:
          type: string
    put:
      tags:
        - Shift
      operationId: shiftUpdate
      summary: PUT Update shift
      description: This endpoint update shift
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShiftUpdateBody'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth: []
    delete:
      tags:
        - Shift
      operationId: shiftDestroy
      summary: DEL Delete shift
      description: This endpoint delete shift
      responses:
        '200':
          description: response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShiftDestroyResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth: []
  /users:
    get:
      tags:
        - User
      operationId: userGetAll
      summary: GET All users
      description: 'This endpoint gets all users, in case you are logged in as admin or user, only same group'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetAllResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
        - BearerAuth: []
  /user:
    post:
      tags:
        - User
      operationId: userCreate
      summary: POST Create user
      description: This endpoint create new user with api key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
        - BearerAuth:
            - owner
            - admin
  '/user/{id}':
    parameters:
      - name: id
        in: path
        description: The ID of the user
        required: true
        schema:
          type: string
    get:
      parameters:
        - name: group
          in: query
          description: Filter users by a specific group. Only 'owner' role can use this parameter.
          required: false
          schema:
            type: string
      tags:
        - User
      operationId: userGetById
      summary: GET Get user
      description: This endpoint gets user object
      responses:
        '200':
          description: Response with UserModel payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetByIdResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security:
        - BearerAuth: []
    put:
      tags:
        - User
      operationId: userUpdateById
      summary: PUT Update user
      description: This endpoint update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security:
        - BearerAuth:
            - owner
            - admin
tags:
  - name: Auth
    description: Login and reset password
  - name: Availability
    description: Public Api for availability
  - name: Booking
    description: Manage bookings
  - name: Installation
    description: Installation of the platform
  - name: My Account
    description: Manage logged in user data.
  - name: Product
    description: Manage products
  - name: Setting
    description: Setting Api
  - name: Shift
    description: Manage shifts for user.
  - name: Shopify
    description: Shopify api
  - name: User
    description: Manage users.
