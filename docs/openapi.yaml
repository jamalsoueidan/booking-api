openapi: 3.0.2
info:
  version: 1.0.0
  title: Booking Shopify Api
  license:
    name: MIT
    url: 'http://'
  contact:
    name: jamal Soueidan
    email: jamal@soueidan.com
    url: 'https://github.com/jamalsoueidan'
  x-tagGroups:
    - name: all api endpoints
      tags:
        - Schedule
servers:
  - url: 'https://booking-shopify-api.azurewebsites.net/api'
components:
  responses:
    BadResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    ForbiddenResponse:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    NotFoundResponse:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
  schemas:
    Errors:
      type: object
      properties:
        success:
          type: boolean
          example: false
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: array
                items:
                  type: string
              message:
                type: string
              code:
                type: string
              expected:
                type: string
              received:
                type: number
            required:
              - path
              - message
              - code
      required:
        - success
        - errors
    User:
      type: object
      properties:
        customerId:
          type: number
        title:
          type: string
        username:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
        fullname:
          type: string
        description:
          type: string
        social_urls:
          type: object
          properties:
            youtube:
              type: string
            twitter:
              type: string
            instagram:
              type: string
        active:
          type: boolean
        avatar:
          type: string
          format: uri
        speaks:
          type: array
          items:
            type: string
      required:
        - customerId
        - title
        - fullname
        - avatar
        - speaks
        - active
        - social_urls
        - description
    Destroy:
      type: object
      properties:
        deletedCount:
          type: number
        acknowledged:
          type: boolean
      required:
        - deletedCount
        - acknowledged
    Day:
      type: string
      enum:
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        - sunday
    Interval:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
      required:
        - from
        - to
    Slot:
      type: object
      properties:
        day:
          $ref: '#/components/schemas/Day'
        intervals:
          type: array
          items:
            $ref: '#/components/schemas/Interval'
      required:
        - day
        - intervals
    Product:
      type: object
      properties:
        productId:
          type: number
        duration:
          type: number
        breakTime:
          type: number
        noticePeriod:
          type: object
          properties:
            value:
              type: number
              default: 1
            unit:
              default: hours
              type: string
              enum:
                - hours
                - days
                - weeks
        bookingPeriod:
          type: object
          properties:
            value:
              type: number
              default: 1
            unit:
              $ref: '#/components/schemas/ProductNoticeUnit'
              default: months
      required:
        - productId
        - duration
        - breakTime
        - noticePeriod
        - bookingPeriod
    ProductBookingUnit:
      $ref: '#/components/schemas/ProductNoticeUnit'
    ProductNoticeUnit:
      type: string
      enum:
        - weeks
        - months
    Schedule:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        customerId:
          type: number
        slots:
          type: array
          items:
            $ref: '#/components/schemas/Slot'
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
      required:
        - _id
        - name
        - customerId
        - slots
        - products
    ScheduleCreateBody:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    ScheduleCreateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Schedule'
      required:
        - success
        - payload
    ScheduleDestroyResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Destroy'
      required:
        - success
        - payload
    ScheduleListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
      required:
        - success
        - payload
    ScheduleGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Schedule'
      required:
        - success
        - payload
    ScheduleUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Schedule'
      required:
        - success
        - payload
    ScheduleUpdateBody:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    ScheduleSlotsUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Schedule'
      required:
        - success
        - payload
    ScheduleSlotsUpdateBody:
      type: array
      items:
        $ref: '#/components/schemas/Slot'
    ScheduleProductCreateOrUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Product'
      required:
        - success
        - payload
    ScheduleProductCreateOrUpdateBody:
      type: object
      properties:
        duration:
          type: string
        breakTime:
          type: string
        noticePeriod:
          type: object
          properties:
            value:
              type: string
              default: 1
            unit:
              $ref: '#/components/schemas/Product/properties/noticePeriod/properties/unit'
              default: hours
        bookingPeriod:
          type: object
          properties:
            value:
              type: string
              default: 1
            unit:
              $ref: '#/components/schemas/ProductNoticeUnit'
              default: months
      required:
        - duration
        - breakTime
        - noticePeriod
        - bookingPeriod
    ScheduleProductDestroyResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Destroy'
      required:
        - success
        - payload
    ScheduleProductGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Product'
      required:
        - success
        - payload
    Customer:
      type: object
      properties:
        customerId:
          type: number
        title:
          type: string
        username:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
        fullname:
          type: string
        description:
          type: string
        social_urls:
          type: object
          properties:
            youtube:
              type: string
            twitter:
              type: string
            instagram:
              type: string
        active:
          type: boolean
        avatar:
          type: string
          format: uri
        speaks:
          type: array
          items:
            type: string
      required:
        - customerId
        - title
        - fullname
        - avatar
        - speaks
        - active
        - social_urls
        - description
    CustomerProductList:
      type: object
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            _id:
              type: string
            name:
              type: string
          required:
            - _id
            - name
    CustomerProductAvailability:
      type: object
      properties:
        date:
          type: string
          format: date-time
          example: '2023-05-05T00:00:00.000Z'
        slots:
          type: array
          items:
            type: string
            format: date-time
          example:
            - '2023-05-05T08:00:00.000Z'
      required:
        - date
        - slots
    CustomerCreateOrUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/Customer'
      required:
        - success
        - payload
    CustomerCreateOrUpdateBody:
      type: object
      properties:
        title:
          type: string
        username:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
        fullname:
          type: string
        description:
          type: string
        social_urls:
          type: object
          properties:
            youtube:
              type: string
            twitter:
              type: string
            instagram:
              type: string
        active:
          type: string
        avatar:
          type: string
          format: uri
        speaks:
          type: array
          items:
            type: string
      required:
        - fullname
        - avatar
    CustomerProductListIdsResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            type: number
      required:
        - success
        - payload
    CustomerProductListResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerProductList'
      required:
        - success
        - payload
    CustomerProductAvailabilityResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          type: array
          items:
            $ref: '#/components/schemas/CustomerProductAvailability'
      required:
        - success
        - payload
    UserGetResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        payload:
          $ref: '#/components/schemas/User'
      required:
        - success
        - payload
paths:
  '/user/{username}':
    parameters:
      - name: username
        in: path
        description: username
        required: true
        schema:
          type: string
    get:
      tags:
        - User
      operationId: userGet
      summary: GET Get user
      description: This endpoint gets user object
      responses:
        '200':
          description: Response with payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  /users:
    get:
      tags:
        - User
      operationId: usersList
      summary: GET Get all users
      description: This endpoint get all users
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  payload:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                required:
                  - success
                  - payload
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}':
    parameters:
      - name: customerId
        in: path
        description: customerId is needed
        required: true
        schema:
          type: string
    put:
      tags:
        - Customer
      operationId: customerCreateOrUpdate
      summary: PUT Create or Update user
      description: This endpoint creates new or updates user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreateOrUpdateBody'
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCreateOrUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/products':
    parameters:
      - name: customerId
        in: path
        description: customerId is needed
        required: true
        schema:
          type: string
    get:
      tags:
        - Customer
      operationId: customerProductsList
      summary: GET Get products for customer
      description: This endpoint get products for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/products/ids':
    parameters:
      - name: customerId
        in: path
        description: customerId is needed
        required: true
        schema:
          type: string
    get:
      tags:
        - Customer
      operationId: customerProductsListIds
      summary: GET Get product ids for customer
      description: This endpoint get product ids for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductListIdsResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/product/{productId}/availability':
    parameters:
      - name: customerId
        in: path
        description: This field for customerId
        required: true
        schema:
          type: string
      - name: productId
        in: path
        description: This field for productId
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: This field filter by start date
        required: true
        schema:
          type: string
          format: date-time
    get:
      tags:
        - Customer
      operationId: customerProductAvailabilityGet
      summary: GET Get all availabilty for customer product
      description: This endpoint get all availability for product for customerId
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerProductAvailabilityResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/schedule':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
    post:
      tags:
        - Schedule
      operationId: customerScheduleCreate
      summary: POST Create schedule
      description: This endpoint create new schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleCreateBody'
      responses:
        '200':
          description: Response with schedule payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleCreateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/schedules':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
    get:
      tags:
        - Schedule
      operationId: customerScheduleList
      summary: GET Get all schedule for customer
      description: This endpoint get all schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleListResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/schedule/{scheduleId}':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
      - name: scheduleId
        in: path
        description: The ID of the scheduleId
        required: true
        schema:
          type: string
    get:
      tags:
        - Schedule
      operationId: customerScheduleGet
      summary: GET Get schedule for customer
      description: This endpoint get schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
    put:
      tags:
        - Schedule
      operationId: customerScheduleUpdate
      summary: PUT Update schedule
      description: This endpoint update schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleUpdateBody'
      responses:
        '200':
          description: Response with schedule payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    delete:
      tags:
        - Schedule
      operationId: customerScheduleDestroy
      summary: DEL destroy schedule
      description: This endpoint destroy schedule for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleDestroyResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      security: []
  '/customer/{customerId}/schedule/{scheduleId}/slots':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
      - name: scheduleId
        in: path
        description: The ID of the scheduleId
        required: true
        schema:
          type: string
    put:
      tags:
        - Slot
      operationId: customerScheduleSlotUpdate
      summary: PUT Update schedule slot
      description: This endpoint update schedule slot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleSlotsUpdateBody'
      responses:
        '200':
          description: Response with schedule payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleSlotsUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
  '/customer/{customerId}/schedule/{scheduleId}/product/{productId}':
    parameters:
      - name: customerId
        in: path
        description: The ID of the customerId
        required: true
        schema:
          type: string
      - name: scheduleId
        in: path
        description: The ID of the scheduleId
        required: true
        schema:
          type: string
      - name: productId
        in: path
        description: The ID of the productId
        required: true
        schema:
          type: string
    get:
      tags:
        - Product
      operationId: customerScheduleProductGet
      summary: GET Get schedule product for customer
      description: This endpoint get schedule product for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleProductGetResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    put:
      tags:
        - Product
      operationId: customerScheduleProductCreateOrUpdate
      summary: PUT Create OR Update schedule product
      description: This endpoint update schedule product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleProductCreateOrUpdateBody'
      responses:
        '200':
          description: Response with schedule product payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleProductCreateOrUpdateResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
    delete:
      tags:
        - Product
      operationId: customerScheduleProductDestroy
      summary: DEL destroy schedule product
      description: This endpoint destroy schedule product for customer
      responses:
        '200':
          description: Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleProductDestroyResponse'
        '400':
          $ref: '#/components/responses/BadResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      security: []
